// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  googleId      String
  displayName   String
  email         String
  photo         String?
  channel       Channel?
  likes         Like[]
  subscriptions Subscription[] 
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Channel {
  id            String        @id @default(uuid())
  channelName   String
  user          User          @relation(fields: [userId], references: [id])
  userId        String        @unique
  videos        Video[]
  videoQueues   VideoQueue[]
  subscribers   Subscription[] @relation("SubscribedChannel")
}

model Video {
  id            String        @id @default(uuid())
  title         String
  description   String?
  playlistPath  String?
  videoPath     String?
  thumbnailUrl  String?
  published     Boolean       @default(false)
  channel       Channel       @relation(fields: [channelId], references: [id])
  channelId     String
  videoQueue    VideoQueue?
  likes         Like[]
  views         Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt


}

model VideoQueue {
  id            String       @id @default(uuid())
  status        VideoStatus  @default(QUEUED)
  playlistPath  String?
  channel       Channel      @relation(fields: [channelId], references: [id])
  channelId     String
  video         Video        @relation(fields: [videoId], references: [id])
  videoId       String       @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt


}

model Like {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  video         Video       @relation(fields: [videoId], references: [id])
  videoId       String
  type          LikeType
  createdAt     DateTime    @default(now())

  @@unique([userId, videoId])
}

model Subscription {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id]) 
  userId        String
  subscribedTo  Channel     @relation("SubscribedChannel",fields: [channelId], references: [id]) 
  channelId     String
  createdAt     DateTime    @default(now())

  @@unique([userId, channelId])
}

enum VideoStatus {
  QUEUED
  IN_PROCESS
  PROCESSED
  FAILED
}

enum LikeType {
  LIKE
  DISLIKE
}